geom_jitter(alpha = ifelse(player_attr$player_class == "Advanced", 1, 0.2), width = 0.3) +
theme_minimal() +
ylab("Age of the players in 2016") +
scale_size_continuous(range = c(1, 10)) +
scale_color_manual(values = colors)+
#add geom boxplot over it to show the distribution
geom_boxplot(aes(y = age, color = player_class), alpha = 0.4, width = 0.6, outlier.shape = 20)+
# set the axis text size to 18
theme(axis.text = element_text(size = 28)) +
# set axis labels size to be 24
theme(axis.title = element_text(size = 48)) +
#remove axis title
xlab("")+
#increase the lgend size and text to 20
theme(legend.text = element_text(size = 32))+
#set title of legend to "Players Proficiency"
labs(color = "Players proficiency") +
#increase legend title
theme(legend.title = element_text(size = 36))+
#increase legend symbol size
theme(legend.key.size = unit(1.2, "cm"))+
#make the text white
theme(text = element_text(color = "black"))
#save as ggplot
ggsave(plot = age_plot, filename = "age_plot.png", height = 5, width = 5)
#include the age plot in rmd
knitr::include_graphics("age_plot.png")
#specify text size and fonts
alien <- c('#47fcea', '#28ee85', '#17bd52', '#679d76', '#3e6f50', '#27593d')
txt <- alien[2]
bg <- 'black' # '#010101'
accent <- txt
font_add("fa-brands", regular = "ufo/fa-brands-400.ttf")
font_add("fa-solid",  regular = "ufo/fa-solid-900.ttf")
font_add_google("Orbitron", "orb")
font_add_google("Barlow", "bar")
showtext_auto()
ft <- "orb"
ft1 <- "bar"
# ðŸ”¡ text --------------------------------------------------------------------
mastodon <- glue("<span style='font-family:fa-brands; color:{accent}'>&#xf4f6;</span>")
twitter <- glue("<span style='font-family:fa-brands; color:{accent}'>&#xf099;</span>")
github <- glue("<span style='font-family:fa-brands; color:{accent}'>&#xf09b;</span>")
floppy <- glue("<span style='font-family:fa-solid; color:{accent}'>&#xf0c7;</span>")
space <- glue("<span style='color:{bg};font-size:1px'>'</span>")
space2 <- glue("<span style='color:{bg}'>--</span>")
caption <- glue("{mastodon}{space2}@sujan@{space}sujandon.org{space2}{twitter}{space2}@sujan{space2}{github}{space2}sbgithubhm/tidytues{space2}{floppy}{space2}European players attributes comparison")
# ## ---------------copy of UFO plot
g_base <- ggplot() +
labs(
title = "European Soccer Players \n attributes comparison based \n on Overall ratings 2016",
subtitle = "Advanced players(>85 ratings), Intermediate players(70-85 ratings), Novice players(<70 ratings)",
caption = caption
) +
theme_void() +
theme(
text = element_text(family = ft, size = 36, lineheight = 0.3, colour = txt),
plot.background = element_rect(fill = "white", colour = bg),
plot.title = element_text(size = 128, face = "bold", hjust = 0.5, margin = margin(b = 10)),
plot.subtitle = element_text(family = ft1, hjust = 0.5, margin = margin(b = 20), color = "#27593d"),
plot.caption = element_markdown(family = ft1, colour = colorspace::darken(txt, 0.5), hjust = 0.5,
margin = margin(t = 20)),
plot.margin = margin(b = 20, t = 50, r = 50, l = 50),
axis.text.x = element_text())
# # quote 1 for the distribution
quote1 <- ggplot() +
annotate("text", x = 0, y = 1, label ="Median age of playesr betweeen \n all proficiency category is almost similar",
family = ft1, colour = txt, size = 16, hjust = 0, fontface = "italic", lineheight = 0.4) +
xlim(0, 1) +
ylim(0, 1) +
theme_void() +
coord_cartesian(clip = "off")
quote2 <- ggplot() +
annotate("text", x = 0, y = 1, label ="High rated players have greater agility,\n finishing, crossing and dribbling",
family = ft1, colour = txt, size = 16, hjust = 0, fontface = "italic", lineheight = 0.4) +
xlim(0, 1) +
ylim(0, 1) +
theme_void() +
coord_cartesian(clip = "off")
#quote 3
quote3 <- ggplot() +
annotate("text", x = 0, y = 1, label = str_wrap("Ternary plot is not rendering becuase it says it requires 3 axis. why would it require 3 axis if i want it bring it in the plan"),
family = ft1, colour = txt, size = 16, hjust = 0, fontface = "italic", lineheight = 0.4) +
xlim(0, 1) +
ylim(0, 1) +
theme_void() +
coord_cartesian(clip = "off")
# load the image and rasterize it
library(png)
image <- readPNG("tern_plot.png")
#conver this to raster object
image <- as.raster(image)
# # Combine the plots into a single infographic
g_final <- g_base +
#age
inset_element(age_plot, left = 0, right = 0.6, top = 1, bottom = 0.66) +
#insert radar plot
inset_element(image, left = -0.2, right = 0.8, top = 0.6, bottom = 0) +
# avoid overlay
inset_element(radar_plot, left = 0.5, right = 1.10, top = 0.8, bottom = 0.4) +
#insert ternary plot
#insert quote 1
inset_element(quote1, left = 0.7, right = 1, top = 0.8, bottom = 0.72) +
#Insert quote 2
inset_element(quote2, left = 0, right = 0.5, top = 0.6, bottom = 0.5) +
#insert age description
inset_element(quote3, left = 0.7, right = 1, top = 0.2, bottom = 0) +
plot_annotation(
theme = theme(
plot.background = element_rect(fill = "white", colour = 'white')))
ggsave(plot = g_final, filename = "infographics_draft.png", height = 16, width = 10)
#load the ggsave image as png in the plot window
knitr::include_graphics("infographics_draft.png")
#summarize the data and plot the summary output with radar chart
radar_data <- clean_player_data %>%
group_by(player_class) %>%
select(-player_name,  player_class) %>%
summarise_all(mean, na.rm = TRUE) %>%
arrange(ifelse(player_class == "Advanced", 1, ifelse(player_class == "Intermediate", 2, 3)))
#create custom color paletteA
colors <- c("#7f58AF", "#64C5EB", "#E84D8A", "#FEB326", "lightblue")
radar_plot <- ggradar(radar_data,
grid.min = 0,
grid.max =  100,
grid.mid = 50,
axis.label.size = 14,
label.centre.y = F,
group.line.width = 0.8,
gridline.mid.colour = "grey",
group.point.size  = 2,
grid.label.size = 14,
group.colours = colors,
background.circle.colour = "white",
legend.title  = "Players proficiency",
legend.text.size = 24) +
theme(legend.title = element_text(size = 18))+
#change legend text size
theme(legend.text = element_text(size = 18))+
#change caption size
theme(plot.caption = element_text(size = 18))+
#make the background theme white
theme_minimal() +
#remove y axis label
theme(axis.text.y = element_blank())+
#revmoe x axis label
theme(axis.text.x = element_blank())+
#remove all grid lines
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
#remove legend
theme(legend.position = "none")
#save this as png
ggsave(plot = radar_plot, filename = "radar_plot.jpg", height = 5, width = 5)
#include the png in rmd
knitr::include_graphics("radar_plot.jpg", height = 5, width = 5)
#summarize the data and plot the summary output with radar chart
radar_data <- clean_player_data %>%
group_by(player_class) %>%
select(-player_name,  player_class) %>%
summarise_all(mean, na.rm = TRUE) %>%
arrange(ifelse(player_class == "Advanced", 1, ifelse(player_class == "Intermediate", 2, 3)))
#create custom color paletteA
colors <- c("#7f58AF", "#64C5EB", "#E84D8A", "#FEB326", "lightblue")
radar_plot <- ggradar(radar_data,
grid.min = 0,
grid.max =  100,
grid.mid = 50,
axis.label.size = 14,
label.centre.y = F,
group.line.width = 0.8,
gridline.mid.colour = "grey",
group.point.size  = 2,
grid.label.size = 14,
group.colours = colors,
background.circle.colour = "white",
legend.title  = "Players proficiency",
legend.text.size = 24) +
theme(legend.title = element_text(size = 18))+
#change legend text size
theme(legend.text = element_text(size = 18))+
#change caption size
theme(plot.caption = element_text(size = 18))+
#make the background theme white
theme_minimal() +
#remove y axis label
theme(axis.text.y = element_blank())+
#revmoe x axis label
theme(axis.text.x = element_blank())+
#remove all grid lines
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
#remove legend
theme(legend.position = "none")
#save this as png
ggsave(plot = radar_plot, filename = "radar_plot.jpg", height = 5, width = 5)
#include the png in rmd
knitr::include_graphics("radar_plot.jpg")
radar_image
#read the radar_plot as image
radar_image <- image_read("radar_plot.jpg")
radar_image
#read the radar_plot.jpg as image and load it as image in qmd
![radarplot](radar_plot.png)
#read the radar_plot.jpg as image and load it as image in qmd
![radarplot](radar_plot.png)
#read the radar_plot.jpg as image and load it as image in qmd
![radarplot](radar_plot.png)
![radarplot](radar_plot.png)
![radarplot]('radar_plot.png')
#summarize the data and plot the summary output with radar chart
radar_data <- clean_player_data %>%
group_by(player_class) %>%
select(-player_name,  player_class) %>%
summarise_all(mean, na.rm = TRUE) %>%
arrange(ifelse(player_class == "Advanced", 1, ifelse(player_class == "Intermediate", 2, 3)))
#create custom color paletteA
colors <- c("#7f58AF", "#64C5EB", "#E84D8A", "#FEB326", "lightblue")
radar_plot <- ggradar(radar_data,
grid.min = 0,
grid.max =  100,
grid.mid = 50,
axis.label.size = 14,
label.centre.y = F,
group.line.width = 0.8,
gridline.mid.colour = "grey",
group.point.size  = 2,
grid.label.size = 14,
group.colours = colors,
background.circle.colour = "white",
legend.title  = "Players proficiency",
legend.text.size = 24) +
theme(legend.title = element_text(size = 18))+
#change legend text size
theme(legend.text = element_text(size = 18))+
#change caption size
theme(plot.caption = element_text(size = 18))+
#make the background theme white
theme_minimal() +
#remove y axis label
theme(axis.text.y = element_blank())+
#revmoe x axis label
theme(axis.text.x = element_blank())+
#remove all grid lines
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
#remove legend
theme(legend.position = "none")
#save this as png
ggsave(plot = radar_plot, filename = "radar_plot.jpg", height = 5, width = 5)
#summarize the data and plot the summary output with radar chart
radar_data <- clean_player_data %>%
group_by(player_class) %>%
select(-player_name,  player_class) %>%
summarise_all(mean, na.rm = TRUE) %>%
arrange(ifelse(player_class == "Advanced", 1, ifelse(player_class == "Intermediate", 2, 3)))
#create custom color paletteA
colors <- c("#7f58AF", "#64C5EB", "#E84D8A", "#FEB326", "lightblue")
radar_plot <- ggradar(radar_data,
grid.min = 0,
grid.max =  100,
grid.mid = 50,
axis.label.size = 14,
label.centre.y = F,
group.line.width = 0.8,
gridline.mid.colour = "grey",
group.point.size  = 2,
grid.label.size = 14,
group.colours = colors,
background.circle.colour = "white",
legend.title  = "Players proficiency",
legend.text.size = 24) +
theme(legend.title = element_text(size = 18))+
#change legend text size
theme(legend.text = element_text(size = 18))+
#change caption size
theme(plot.caption = element_text(size = 18))+
#make the background theme white
theme_minimal() +
#remove y axis label
theme(axis.text.y = element_blank())+
#revmoe x axis label
theme(axis.text.x = element_blank())+
#remove all grid lines
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
#remove legend
theme(legend.position = "none")
#save this as png
ggsave(plot = radar_plot, filename = "radar_plot.jpg", height = 5, width = 5)
#read the image and include it in the rmd
knitr::include_graphics("rad_plot.jpg")
#change the radar_plot.jpg to static image
radar_plot <- image_read("radar_plot.jpg")
#standarize the clean_player_data for all numeric columns based on min and max value
player_standarized <- clean_player_data %>%
mutate(across(where(is.numeric), ~scales::rescale(.x, to = c(0, 1))))
# Plot the ternary plot for three attributes: strength, aggression, and balance
tern_plot <-
ggtern(player_standarized, aes(x = finishing, y = dribbling, z = strength, color = player_class)) +
geom_point(alpha = 0.3) +
theme_rgbw() +
scale_color_manual(values = colors) +
# Highlight all points with advanced players
geom_point(data = player_standarized %>% filter(player_class == "Advanced"),
aes(x = finishing, y = dribbling, z = agility)) +
# Change legend title
labs(color = "Players proficiency") +
# Add labels for popular players of presnt data
geom_text(data = player_standarized %>%
filter(player_name %in% c("Lionel Messi", "Cristiano Ronaldo", "Virgil van Dijk")),
aes(label = player_name),
alpha = 1,
hjust = -0.1,
hjust = 0.5,
size = 8, color = "black") +
# Color the points for Messi and Ronaldo
geom_point(data = player_standarized %>%
filter(player_name %in% c("Lionel Messi", "Cristiano Ronaldo", "Virgil van Dijk")),
aes(x = finishing, y = dribbling, z = strength, fill = player_class),
color = 'black',
shape = 21,
size = 3) +
#manual fill color for the highlighted players
scale_fill_manual(values = c("Advanced" = "#7f58AF", "Intermediate" = "#64C5EB", "Novice" = "#E84D8A"))+
#remove the legend for fill
guides(fill = FALSE) +
#increase legend size
theme(legend.text = element_text(size = 32))+
#increase legend title
theme(legend.title = element_text(size = 36))+
#increase axis text size
theme(axis.text = element_text(size = 32))+
#remove the legend
theme(legend.position = "none")
#save this as jpg using ggsave with name tern_plot
ggsave(plot = tern_plot, filename = "tern_plot.png", height = 5, width = 5)
#Include the ternary plot in the rmd
knitr::include_graphics("tern_plot.png")
#Include the ternary plot in the rmd
knitr::include_graphics("static_tern.png")
#select birthdate from the player attr data, and plot histogram
age_plot <- player_attr %>%
#convert the date to year
mutate(birthday = as.Date(birthday)) %>%
mutate(birthday = as.numeric(format(birthday, "%Y"))) %>%
#calculate the age
mutate(age = 2016 - birthday) %>%
ggplot(aes(x = player_class, y = age, color = player_class)) +
geom_jitter(alpha = ifelse(player_attr$player_class == "Advanced", 1, 0.2), width = 0.3) +
theme_minimal() +
ylab("Age of the players in 2016") +
scale_size_continuous(range = c(1, 10)) +
scale_color_manual(values = colors)+
#add geom boxplot over it to show the distribution
geom_boxplot(aes(y = age, color = player_class), alpha = 0.4, width = 0.6, outlier.shape = 20)+
# set the axis text size to 18
theme(axis.text = element_text(size = 28)) +
# set axis labels size to be 24
theme(axis.title = element_text(size = 48)) +
#remove axis title
xlab("")+
#increase the lgend size and text to 20
theme(legend.text = element_text(size = 32))+
#set title of legend to "Players Proficiency"
labs(color = "Players proficiency") +
#increase legend title
theme(legend.title = element_text(size = 36))+
#increase legend symbol size
theme(legend.key.size = unit(1.2, "cm"))+
#make the text white
theme(text = element_text(color = "black"))
#save as ggplot
ggsave(plot = age_plot, filename = "age_plot.png", height = 5, width = 5)
#include the age plot in rmd
knitr::include_graphics("age_plot.png")
#summarize the data and plot the summary output with radar chart
radar_data <- clean_player_data %>%
group_by(player_class) %>%
select(-player_name,  player_class) %>%
summarise_all(mean, na.rm = TRUE) %>%
arrange(ifelse(player_class == "Advanced", 1, ifelse(player_class == "Intermediate", 2, 3)))
#create custom color paletteA
colors <- c("#7f58AF", "#64C5EB", "#E84D8A", "#FEB326", "lightblue")
radar_plot <- ggradar(radar_data,
grid.min = 0,
grid.max =  100,
grid.mid = 50,
axis.label.size = 14,
label.centre.y = F,
group.line.width = 0.8,
gridline.mid.colour = "grey",
group.point.size  = 2,
grid.label.size = 14,
group.colours = colors,
background.circle.colour = "white",
legend.title  = "Players proficiency",
legend.text.size = 24) +
theme(legend.title = element_text(size = 18))+
#change legend text size
theme(legend.text = element_text(size = 18))+
#change caption size
theme(plot.caption = element_text(size = 18))+
#make the background theme white
theme_minimal() +
#remove y axis label
theme(axis.text.y = element_blank())+
#revmoe x axis label
theme(axis.text.x = element_blank())+
#remove all grid lines
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
#remove legend
theme(legend.position = "none")
#save this as png
ggsave(plot = radar_plot, filename = "radar_plot.png", height = 5, width = 5)
#read the image and include it in the rmd
knitr::include_graphics("static_rad.png")
#summarize the data and plot the summary output with radar chart
radar_data <- clean_player_data %>%
group_by(player_class) %>%
select(-player_name,  player_class) %>%
summarise_all(mean, na.rm = TRUE) %>%
arrange(ifelse(player_class == "Advanced", 1, ifelse(player_class == "Intermediate", 2, 3)))
#create custom color paletteA
colors <- c("#7f58AF", "#64C5EB", "#E84D8A", "#FEB326", "lightblue")
radar_plot <- ggradar(radar_data,
grid.min = 0,
grid.max =  100,
grid.mid = 50,
axis.label.size = 14,
label.centre.y = F,
group.line.width = 0.8,
gridline.mid.colour = "grey",
group.point.size  = 2,
grid.label.size = 14,
group.colours = colors,
background.circle.colour = "white",
legend.title  = "Players proficiency",
legend.text.size = 24) +
theme(legend.title = element_text(size = 18))+
#change legend text size
theme(legend.text = element_text(size = 18))+
#change caption size
theme(plot.caption = element_text(size = 18))+
#make the background theme white
theme_minimal() +
#remove y axis label
theme(axis.text.y = element_blank())+
#revmoe x axis label
theme(axis.text.x = element_blank())+
#remove all grid lines
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())+
#remove legend
theme(legend.position = "none")
#save this as png
ggsave(plot = radar_plot, filename = "radar_plot.png", height = 5, width = 5)
#read the image and include it in the rmd
knitr::include_graphics("static_rad.png")
# # Combine the plots into a single infographic
g_final <- g_base +
#age
inset_element(age_plot, left = 0, right = 0.6, top = 1, bottom = 0.66) +
#insert radar plot
inset_element(image, left = -0.2, right = 0.8, top = 0.6, bottom = 0) +
# avoid overlay
inset_element(radar_plot, left = 0.5, right = 1.10, top = 0.8, bottom = 0.4) +
#insert ternary plot
#insert quote 1
inset_element(quote1, left = 0.7, right = 1, top = 0.8, bottom = 0.72) +
#Insert quote 2
inset_element(quote2, left = 0, right = 0.5, top = 0.6, bottom = 0.5) +
#insert age description
inset_element(quote3, left = 0.7, right = 1, top = 0.2, bottom = 0) +
plot_annotation(
theme = theme(
plot.background = element_rect(fill = "white", colour = 'white')))
ggsave(plot = g_final, filename = "infographics_draft.png", height = 16, width = 10)
#load the ggsave image as png in the plot window
knitr::include_graphics("static_infographics.png")
# # Combine the plots into a single infographic
g_final <- g_base +
#age
inset_element(age_plot, left = 0, right = 0.6, top = 1, bottom = 0.66) +
#insert radar plot
inset_element(image, left = -0.1, right = 0.8, top = 0.6, bottom = 0) +
# avoid overlay
inset_element(radar_plot, left = 0.5, right = 1.10, top = 0.8, bottom = 0.4) +
#insert ternary plot
#insert quote 1
inset_element(quote1, left = 0.7, right = 1, top = 0.8, bottom = 0.72) +
#Insert quote 2
inset_element(quote2, left = 0, right = 0.5, top = 0.6, bottom = 0.5) +
#insert age description
inset_element(quote3, left = 0.7, right = 1, top = 0.2, bottom = 0) +
plot_annotation(
theme = theme(
plot.background = element_rect(fill = "white", colour = 'white')))
ggsave(plot = g_final, filename = "infographics_draft.png", height = 16, width = 10)
# # Combine the plots into a single infographic
g_final <- g_base +
#age
inset_element(age_plot, left = 0, right = 0.6, top = 1, bottom = 0.66) +
#insert radar plot
inset_element(image, left = -0.01, right = 0.8, top = 0.6, bottom = 0) +
# avoid overlay
inset_element(radar_plot, left = 0.5, right = 1.10, top = 0.8, bottom = 0.4) +
#insert ternary plot
#insert quote 1
inset_element(quote1, left = 0.7, right = 1, top = 0.8, bottom = 0.72) +
#Insert quote 2
inset_element(quote2, left = 0, right = 0.5, top = 0.6, bottom = 0.5) +
#insert age description
inset_element(quote3, left = 0.7, right = 1, top = 0.2, bottom = 0) +
plot_annotation(
theme = theme(
plot.background = element_rect(fill = "white", colour = 'white')))
ggsave(plot = g_final, filename = "infographics_draft.png", height = 16, width = 10)
